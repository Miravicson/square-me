// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: proto/wallet.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface BuyForexRequest {
  userId: string;
  baseCurrency: string;
  amount: string;
  targetCurrency: string;
}

export interface BuyForexResponse {
  success: boolean;
  message: string;
}

export interface CreateWalletRequest {
  userId: string;
  currency: string;
}

export interface CreateWalletResponse {
  userId: string;
  walletId: string;
  currency: string;
  balance: string;
}

export interface GetWalletBalanceRequest {
  userId: string;
  walletCurrency: string;
}

export interface GetWalletBalanceResponse {
  userId: string;
  walletId: string;
  currency: string;
  balance: string;
}

export interface GetAllUserWalletsRequest {
  userId: string;
}

export interface GetAllUserWalletsResponse {
  wallets: GetWalletBalanceResponse[];
}

export interface FundWalletRequest {
  userId: string;
  walletId: string;
  amount: string;
}

export interface FundWalletResponse {
  userId: string;
  walletId: string;
  currency: string;
  balance: string;
}

export interface WithdrawWalletRequest {
  userId: string;
  walletId: string;
  amount: string;
}

export interface WithdrawWalletResponse {
  userId: string;
  walletId: string;
  currency: string;
  balance: string;
}

export interface WalletServiceClient {
  buyForex(request: BuyForexRequest): Observable<BuyForexResponse>;

  createWallet(request: CreateWalletRequest): Observable<CreateWalletResponse>;

  getWalletBalance(request: GetWalletBalanceRequest): Observable<GetWalletBalanceResponse>;

  getAllUserWallets(request: GetAllUserWalletsRequest): Observable<GetAllUserWalletsResponse>;

  fundWallet(request: FundWalletRequest): Observable<FundWalletResponse>;

  withdrawWallet(request: WithdrawWalletRequest): Observable<WithdrawWalletResponse>;
}

export interface WalletServiceController {
  buyForex(request: BuyForexRequest): Promise<BuyForexResponse> | Observable<BuyForexResponse> | BuyForexResponse;

  createWallet(
    request: CreateWalletRequest,
  ): Promise<CreateWalletResponse> | Observable<CreateWalletResponse> | CreateWalletResponse;

  getWalletBalance(
    request: GetWalletBalanceRequest,
  ): Promise<GetWalletBalanceResponse> | Observable<GetWalletBalanceResponse> | GetWalletBalanceResponse;

  getAllUserWallets(
    request: GetAllUserWalletsRequest,
  ): Promise<GetAllUserWalletsResponse> | Observable<GetAllUserWalletsResponse> | GetAllUserWalletsResponse;

  fundWallet(
    request: FundWalletRequest,
  ): Promise<FundWalletResponse> | Observable<FundWalletResponse> | FundWalletResponse;

  withdrawWallet(
    request: WithdrawWalletRequest,
  ): Promise<WithdrawWalletResponse> | Observable<WithdrawWalletResponse> | WithdrawWalletResponse;
}

export function WalletServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "buyForex",
      "createWallet",
      "getWalletBalance",
      "getAllUserWallets",
      "fundWallet",
      "withdrawWallet",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("WalletService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("WalletService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const WALLET_SERVICE_NAME = "WalletService";
